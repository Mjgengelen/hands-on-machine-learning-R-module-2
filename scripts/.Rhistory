dplyr::summarise(claim_freq = sum(nclaims)/sum(expo))
mtpl %>%
dplyr::filter(bm < 2, ageph >= 56) %>%
dplyr::summarise(prediction = (alpha + sum(nclaims))/(beta + sum(expo))) %>% as.data.frame()
## --------------------------------------------------------------------------------------------------------------------------------------------------
mtpl %>%
dplyr::filter(bm < 2, ageph >= 56) %>%
dplyr::summarise(claim_freq = sum(nclaims)/sum(expo)) %>% as.data.frame()
set.seed(9753) # reproducibilty
fit <- rpart(formula = cbind(expo,nclaims) ~ ageph + agec + bm + power + coverage + fuel + sex + fleet + use,
data = mtpl,
method = 'poisson',
control = rpart.control(maxdepth = 20,
minsplit = 2000,
minbucket = 1000,
cp = 0,
xval = 5))
plotcp(fit)
cpt <- fit$cptable
min_xerr <- which.min(cpt[,'xerror'])
fit_srt <- prune(fit,
cp = cpt[min_xerr, 'CP'])
rpart.plot(fit_srt, type = 0, extra = 0, cex = 1.1)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
mtpl <- read.table('../data/PC_data.txt',
header = TRUE, stringsAsFactors = TRUE) %>% as_tibble() %>% rename_all(tolower) %>% rename(expo = exp)
library(rpart)
set.seed(9753) # reproducibilty
fit <- rpart(formula = cbind(expo,nclaims) ~ ageph + agec + bm + power + coverage + fuel + sex + fleet + use,
data = mtpl,
method = 'poisson',
control = rpart.control(maxdepth = 20,
minsplit = 2000,
minbucket = 1000,
cp = 0,
xval = 5))
cpt <- fit$cptable
fit_srt <- prune(fit,
cp = cpt[which.min(cpt[,'xerror']), 'CP'])
library(vip)
vip::vi(fit_srt)
## --------------------------------------------------------------------------------------------------------------------------------------------------
vip::vip(fit_srt, scale = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(pdp)
# Need to define this helper function for Poisson
pred.fun <- function(object,newdata){
mean(predict(object, newdata))
}
## --------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(48927)
pdp_ids <- mtpl %>% nrow %>% sample(size = 5000)
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit_srt %>%
pdp::partial(pred.var = 'ageph',
pred.fun = pred.fun,
train = mtpl[pdp_ids,]) %>%
autoplot()
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit_srt %>%
pdp::partial(pred.var = c('ageph','power'),
pred.fun = pred.fun,
train = mtpl[pdp_ids,]) %>%
autoplot()
library(tidyverse)
set.seed(54321) # reproducibility
dfr <- tibble::tibble(
x = seq(0, 2 * pi, length.out = 500),
m = 2 * sin(x),
y = m + rnorm(length(x), sd = 1))
## --------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(45678) # reproducibility
bsample_1 <- dfr %>% nrow %>% sample(replace = TRUE)
bsample_2 <- dfr %>% nrow %>% sample(replace = TRUE)
dfr_b1 <- dfr %>% dplyr::slice(bsample_1)
dfr_b2 <- dfr %>% dplyr::slice(bsample_2)
## --------------------------------------------------------------------------------------------------------------------------------------------------
dfr_b1 %>% dplyr::arrange(x) %>% head()
dfr_b2 %>% dplyr::arrange(x) %>% head()
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(rpart)
fit_b1 <- rpart(formula = y ~ x,
data = dfr_b1,
method = 'anova',
control = rpart.control(maxdepth = 20,
minsplit = 10,
minbucket = 5,
cp = 0))
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot_pred_reg <- function(dt, preds){
dt %>% mutate(pred = preds) %>% ggplot(aes(x = x)) +
geom_point(aes(y = y), alpha = 0.3) +
geom_line(aes(y = m), colour = 'darkgreen', size = 1.5) +
geom_line(aes(y = pred), colour = 'darkred', size = 1.5) + theme_bw()
}
plot_pred_reg(dt = dfr, preds = predict(fit_b1, dfr))
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit_b2 <- rpart(formula = y ~ x,
data = dfr_b2,
method = 'anova',
control = rpart.control(maxdepth = 20,
minsplit = 10,
minbucket = 5,
cp = 0))
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot_pred_reg(dt = dfr, preds = predict(fit_b2, dfr))
## --------------------------------------------------------------------------------------------------------------------------------------------------
pred_b1 <- fit_b1 %>% predict(dfr)
pred_b2 <- fit_b2 %>% predict(dfr)
pred <- rowMeans(cbind(pred_b1,
pred_b2))
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot_pred_reg(dt = dfr, preds = pred)
set.seed(28726)
bsample_3 <- dfr %>% nrow %>% sample(replace = TRUE)
dfr_b3 <- dfr %>% dplyr::slice(bsample_3)
fit_b3 <- rpart(formula = y ~ x,
data = dfr_b3,
method = 'anova',
control = rpart.control(maxdepth = 20,
minsplit = 10,
minbucket = 5,
cp = 0))
pred_b3 <- fit_b3 %>% predict(dfr)
pred_new <- rowMeans(cbind(pred_b1,
pred_b2,
pred_b3))
plot_pred_reg(dt = dfr, preds = pred_new)
set.seed(12345)
N <- 100000 ; x <- 1:N
mean(x %in% sample(N, replace = TRUE))
## --------------------------------------------------------------------------------------------------------------------------------------------------
mean(x %in% sample(N, size = 0.75*N, replace = TRUE))
library(ipred)
set.seed(83946) # reproducibility
fit <- ipred::bagging(formula = y ~ x,
data = dfr,
nbagg = 200,
ns = nrow(dfr),
coob = TRUE,
control = rpart.control(maxdepth = 20,
minsplit = 40,
minbucket = 20,
cp = 0))
## --------------------------------------------------------------------------------------------------------------------------------------------------
pred <- predict(fit, dfr)
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot_pred_reg(dt = dfr, preds = predict(fit, dfr))
set.seed(98765) # reproducibility
nbags <- 10*(1:20)
oob <- rep(0, length(nbags))
for(i in 1:length(nbags)){
fit <- ipred::bagging(formula = y ~ x,
data = dfr,
nbagg = nbags[i],
ns = nrow(dfr),
coob = TRUE,
control = rpart.control(maxdepth = 20,
minsplit = 40,
minbucket = 20,
cp = 0))
oob[i] <- fit$err
}
## --------------------------------------------------------------------------------------------------------------------------------------------------
ggplot(data.frame('B' = nbags, 'RMSE' = oob), aes(x = B, y = RMSE)) + geom_line()
set.seed(54321) # reproducibility
dfc <- tibble::tibble(
x1 = rep(seq(0.1,10,by = 0.1), times = 100),
x2 = rep(seq(0.1,10,by = 0.1), each = 100),
y = as.factor(
pmin(1,
pmax(0,
round(
1*(x1+2*x2<8) + 1*(3*x1+x2>30) +
rnorm(10000,sd = 0.5))
)
)
)
)
set.seed(98765) # reproducibility
fit <- ipred::bagging(formula = y ~ x1 + x2,
data = dfc,
nbagg = 100,
ns = nrow(dfc),
control = rpart.control(maxdepth = 20,
minsplit = 10,
minbucket = 5,
cp = 0))
plot_pred_class <- function(dt, preds){
dt %>% mutate(pred = preds) %>% ggplot(aes(x = x1, y = x2)) +
geom_point(aes(color = pred))
}
plot_pred_class(dt = dfc, preds = predict(fit, dfc, type = 'class', aggregation = 'majority'))
?predict.ipred
?ipred::predict.classbagg
search_grid <- expand.grid(num.trees = c(100,200),
mtry = c(3,6,9),
min.node.size = c(0.001,0.01)*nrow(mtpl),
error = NA)
print(search_grid)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
mtpl <- read.table('../data/PC_data.txt',
header = TRUE, stringsAsFactors = TRUE) %>% as_tibble() %>% rename_all(tolower) %>% rename(expo = exp)
search_grid <- expand.grid(num.trees = c(100,200),
mtry = c(3,6,9),
min.node.size = c(0.001,0.01)*nrow(mtpl),
error = NA)
print(search_grid)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(ranger)
for(i in seq_len(nrow(search_grid))) {
fit <- ranger(formula = nclaims ~ ageph + agec + bm + power + coverage + fuel + sex + fleet + use,
data = mtpl,
num.trees = search_grid$num.trees[i],
mtry = search_grid$mtry[i],
min.node.size = search_grid$min.node.size[i],
replace = TRUE,
sample.fraction = 0.75,
verbose = FALSE,
seed = 54321)
search_grid$error[i] <- fit$prediction.error
}
## --------------------------------------------------------------------------------------------------------------------------------------------------
search_grid %>% dplyr::arrange(error)
library(tidyverse)
set.seed(54321) # reproducibility
dfr <- tibble::tibble(
x = seq(0, 2 * pi, length.out = 500),
m = 2 * sin(x),
y = m + rnorm(length(x), sd = 1))
library(gbm)
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 10,
interaction.depth = 1,
shrinkage = 1)
## --------------------------------------------------------------------------------------------------------------------------------------------------
pred <- predict(fit,
n.trees = fit$n.trees,
type = 'response')
## --------------------------------------------------------------------------------------------------------------------------------------------------
preds <- do.call(rbind, lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response'))))
library(gganimate)
library(transformr)
preds %>% ggplot(aes(x = x)) +
geom_point(aes(y = y), alpha = 0.3) +
geom_line(aes(y = m), colour = 'darkgreen', size = 1.5) +
geom_line(aes(y = pred), colour = 'darkred', size = 1.5) +
transition_states(iter, transition_length = 0.1, state_length = 0.5) + labs(title = "Iteration: {closest_state}")
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 10,
interaction.depth = 1,
shrinkage = 0.1)
preds <- do.call(rbind, lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response'))))
preds %>% ggplot(aes(x = x)) +
geom_point(aes(y = y), alpha = 0.3) +
geom_line(aes(y = m), colour = 'darkgreen', size = 1.5) +
geom_line(aes(y = pred), colour = 'darkred', size = 1.5) +
transition_states(iter, transition_length = 0.1, state_length = 0.5) + labs(title = "Iteration: {closest_state}") + theme_bw()
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 10,
interaction.depth = 3,
shrinkage = 0.1)
## --------------------------------------------------------------------------------------------------------------------------------------------------
preds <- do.call(rbind, lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response'))))
preds %>% ggplot(aes(x = x)) +
geom_point(aes(y = y), alpha = 0.3) +
geom_line(aes(y = m), colour = 'darkgreen', size = 1.5) +
geom_line(aes(y = pred), colour = 'darkred', size = 1.5) +
transition_states(iter, transition_length = 0.1, state_length = 0.5) + labs(title = "Iteration: {closest_state}") + theme_bw()
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 10,
interaction.depth = 3,
shrinkage = 1)
## --------------------------------------------------------------------------------------------------------------------------------------------------
preds <- do.call(rbind, lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response'))))
preds %>% ggplot(aes(x = x)) +
geom_point(aes(y = y), alpha = 0.3) +
geom_line(aes(y = m), colour = 'darkgreen', size = 1.5) +
geom_line(aes(y = pred), colour = 'darkred', size = 1.5) +
transition_states(iter, transition_length = 0.1, state_length = 0.5) + labs(title = "Iteration: {closest_state}") + theme_bw()
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 300,
interaction.depth = 3,
shrinkage = 0.01)
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot_pred_reg <- function(dt, preds){
dt %>% mutate(pred = preds) %>% ggplot(aes(x = x)) +
geom_point(aes(y = y), alpha = 0.3) +
geom_line(aes(y = m), colour = 'darkgreen', size = 1.5) +
geom_line(aes(y = pred), colour = 'darkred', size = 1.5) + theme_bw()
}
plot_pred_reg(dt = dfr, preds = predict(fit, n.trees = fit$n.trees, type = 'response'))
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 300,
interaction.depth = 3,
shrinkage = 0.1,
var.monotone = 1)
plot_pred_reg(dt = dfr, preds = predict(fit, n.trees = fit$n.trees, type = 'response'))
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 300,
interaction.depth = 3,
shrinkage = 0.1,
var.monotone = -1)
plot_pred_reg(dt = dfr, preds = predict(fit, n.trees = fit$n.trees, type = 'response'))
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit <- gbm(formula = y ~ x,
data = dfr,
distribution = 'gaussian',
n.trees = 300,
interaction.depth = 3,
shrinkage = 0.01)
plot_pred_reg(dt = dfr, preds = predict(fit, n.trees = fit$n.trees, type = 'response'))
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(tidyverse)
set.seed(54321) # reproducibility
dfc <- tibble::tibble(
x1 = rep(seq(0.1,10,by = 0.1), times = 100),
x2 = rep(seq(0.1,10,by = 0.1), each = 100),
y = as.factor(
pmin(1,
pmax(0,
round(
1*(x1+2*x2<8) + 1*(3*x1+x2>30) +
rnorm(10000,sd = 0.5))
)
)
)
)
## --------------------------------------------------------------------------------------------------------------------------------------------------
dfc <- dfc %>% dplyr::mutate(y_recode = as.integer(as.character(y)))
## --------------------------------------------------------------------------------------------------------------------------------------------------
ctrl_grid <- expand.grid(depth = c(1,3,5),
shrinkage = c(0.01,0.1,1))
results <- vector('list', length = nrow(ctrl_grid))
library(gbm)
for(i in seq_len(nrow(ctrl_grid))) {
fit <- gbm(y_recode ~ x1 + x2,
data = dfc,
distribution = 'bernoulli',
n.trees = 100,
interaction.depth = ctrl_grid$depth[i],
shrinkage = ctrl_grid$shrinkage[i])
results[[i]] <- dfc %>% mutate(
depth = factor(paste('depth =',ctrl_grid$depth[i]), ordered =TRUE),
shrinkage = factor(paste('shrinkage =',ctrl_grid$shrinkage[i]), ordered = TRUE),
pred_prob = predict(fit, n.trees = fit$n.trees, type = 'response'), #<<
pred_clas = factor(1*(predict(fit, n.trees = fit$n.trees, type = 'response') >= 0.5))) #<<
}
## --------------------------------------------------------------------------------------------------------------------------------------------------
results <- do.call(rbind, results)
## --------------------------------------------------------------------------------------------------------------------------------------------------
results %>% ggplot(aes(x = x1, y = x2)) +
geom_point(aes(color = pred_prob)) +
facet_grid(depth ~ shrinkage)
## --------------------------------------------------------------------------------------------------------------------------------------------------
results %>% ggplot(aes(x = x1, y = x2)) +
geom_point(aes(color = pred_clas)) +
facet_grid(depth ~ shrinkage)
my_grid <- expand.grid(depth = c(1,3,5),
shrinkage = c(0.01,0.1,1))
my_grid <- my_grid %>% dplyr::mutate(oob_improv = NA)
for(i in seq_len(nrow(my_grid))) {
fit <- gbm(y_recode ~ x1 + x2,
data = dfc,
distribution = 'bernoulli',
n.trees = 100,
interaction.depth = my_grid$depth[i],
shrinkage = my_grid$shrinkage[i])
my_grid$oob_improv[i] <- sum(fit$oobag.improve)
}
my_grid %>% dplyr::arrange(desc(oob_improv))
my_grid <- expand.grid(depth = c(1,3,5),
shrinkage = c(0.01,0.1,1))
my_grid <- my_grid %>% dplyr::mutate(oob_improv = NA)
for(i in seq_len(nrow(my_grid))) {
fit <- gbm(y_recode ~ x1 + x2,
data = dfc,
distribution = 'bernoulli',
n.trees = 100,
interaction.depth = my_grid$depth[i],
shrinkage = my_grid$shrinkage[i])
my_grid$oob_improv[i] <- sum(fit$oobag.improve)
}
my_grid %>% dplyr::arrange(desc(oob_improv))
?gbm
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
mtpl <- read.table('../data/PC_data.txt',
header = TRUE, stringsAsFactors = TRUE) %>% as_tibble() %>% rename_all(tolower) %>% rename(expo = exp)
## --------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(76539) # reproducibility
library(gbm)
fit <- gbm(formula = nclaims ~ ageph + agec + bm + power + coverage + fuel + sex + fleet + use + offset(log(expo)),
data = mtpl,
distribution = 'poisson',
var.monotone = c(0,0,1,0,0,0,0,0,0),
n.trees = 200,
interaction.depth = 3,
n.minobsinnode = 1000,
shrinkage = 0.1,
bag.fraction = 0.75,
cv.folds = 0)
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit %>% pretty.gbm.tree(i.tree = 1)
?pretty.gbm.tree
## --------------------------------------------------------------------------------------------------------------------------------------------------
summary(fit, plotit = FALSE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(pdp)
pred.fun <- function(object,newdata){
mean(predict(object, newdata,
n.trees = object$n.trees,
type = 'response'))
}
## --------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(48927)
pdp_ids <- mtpl %>% nrow %>% sample(size = 5000)
fit %>%
partial(pred.var = 'bm',
pred.fun = pred.fun,
train = mtpl[pdp_ids,],
recursive= FALSE) %>%
autoplot()
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
mtpl <- read.table('../data/PC_data.txt',
header = TRUE, stringsAsFactors = TRUE) %>% as_tibble() %>% rename_all(tolower) %>% rename(expo = exp)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(xgboost)
mtpl_xgb <- xgb.DMatrix(data = mtpl %>%
select(ageph,power,bm,agec,coverage,fuel,sex,fleet,use) %>%
data.matrix,
info = list(
'label' = mtpl$nclaims,
'base_margin' = log(mtpl$expo)))
mtpl_xgb
set.seed(86493) # reproducibility
fit <- xgboost(data = mtpl_xgb,
nrounds = 200,
early_stopping_rounds = 20,
verbose = FALSE,
params = list(
booster = 'gbtree',
objective  = 'count:poisson',
eval_metric = 'poisson-nloglik',
eta = 0.1, nthread = 1,
subsample = 0.75, colsample_bynode = 0.5,
max_depth = 3, min_child_weight = 1000,
gamma = 0, lambda = 1, alpha = 1))
## --------------------------------------------------------------------------------------------------------------------------------------------------
xgb.plot.tree(feature_names = colnames(mtpl_xgb),
model = fit,
trees = 0)
## --------------------------------------------------------------------------------------------------------------------------------------------------
xgb.plot.multi.trees(model = fit,
feature_names = colnames(mtpl_xgb))
## --------------------------------------------------------------------------------------------------------------------------------------------------
xgb.ggplot.importance(importance_matrix = xgb.importance(feature_names = colnames(mtpl_xgb),
model = fit))
set.seed(86493) # reproducibility
xval <- xgb.cv(data = mtpl_xgb,
nrounds = 200,
early_stopping_rounds = 20,
verbose = FALSE,
nfold = 5,
stratified = TRUE,
params = list(booster = 'gbtree',
objective  = 'count:poisson',
eval_metric = 'poisson-nloglik',
eta = 0.1, nthread = 1,
subsample = 0.75, colsample_bynode = 0.5,
max_depth = 3, min_child_weight = 1000,
gamma = 0, lambda = 1, alpha = 1))
## --------------------------------------------------------------------------------------------------------------------------------------------------
xval$evaluation_log
## --------------------------------------------------------------------------------------------------------------------------------------------------
xval_log <- xval$evaluation_log
xval_log <- as.data.frame(rbind(as.matrix(xval_log[,c(1,2,3)]),as.matrix(xval_log[,c(1,4,5)])))
names(xval_log) <- c('iteration','poisson_nloglik','std')
xval_log$loss <- c(rep('train',nrow(xval_log)/2),rep('test',nrow(xval_log)/2))
## --------------------------------------------------------------------------------------------------------------------------------------------------
ggplot(xval_log, aes(x=iteration, y=poisson_nloglik, colour=loss, linetype = loss)) + geom_line(size = 1.3)
## --------------------------------------------------------------------------------------------------------------------------------------------------
ggplot(xval_log[c(150:200,350:400),], aes(x=iteration, y=poisson_nloglik, colour=loss, linetype = loss)) + geom_line(size = 1.5)
