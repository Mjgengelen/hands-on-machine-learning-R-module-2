theme_bw() +
geom_point(size = 1, alpha = 0.3) +
geom_line(aes(y = .fitted), col = KULbg) +
scale_y_continuous(labels = scales::dollar) +
ggtitle("Regression with AMES housing data")
gridExtra::grid.arrange(g_lm_1, g_lm_2, ncol = 2)
dirname(rstudioapi::getActiveDocumentContext()$path)
here::here()
setwd(dir)
## --------------------------------------------------------------------------------------------------------------------------------------------------
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
dir <- here::here()
setwd(dir)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
library(tidyverse)
mtpl_orig <- as_tibble(mtpl_orig)
str(mtpl_orig)
## --------------------------------------------------------------------------------------------------------------------------------------------------
mtpl_orig %>% slice(1:3) %>% select(-LONG, -LAT)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
names(mtpl)
## --------------------------------------------------------------------------------------------------------------------------------------------------
dim(mtpl)
mtpl %>% summarize(emp_freq = sum(nclaims) / sum(expo))
mtpl %>%
group_by(sex) %>%
summarize(emp_freq = sum(nclaims) / sum(expo))
KULbg <- "#116E8A"
g <- ggplot(mtpl, aes(nclaims)) + theme_bw() +
geom_bar(aes(weight = expo),
col = KULbg, fill = KULbg) +
labs(y = "Abs freq (in exposure)") +
ggtitle("MTPL - number of claims")
g
## --------------------------------------------------------------------------------------------------------------------------------------------------
g_freq <- ggplot(mtpl, aes(nclaims)) + theme_bw() +
geom_bar(aes(weight = expo), col = KULbg,
fill = KULbg, alpha = .5) +
labs(y = "Abs freq (in exposure)") +
ggtitle("MTPL - number of claims")
g_freq
g_sev <- ggplot(mtpl, aes(x = avg)) + theme_bw() +
geom_histogram(bins = 30, boundary = 0, color = KULbg, fill = KULbg, alpha = .5) +
labs(x = "claim severity") +
xlim(c(0, 20000))
g_sev
## --------------------------------------------------------------------------------------------------------------------------------------------------
freq_glm_1 <- glm(nclaims ~ sex, offset = log(expo),
family = poisson(link = "log"),
data = mtpl)
freq_glm_1 %>% broom::tidy()
freq_glm_1 %>% broom::augment(type.predict = "response") %>% slice(1:2) %>% select(nclaims, sex, .fitted)
exp(coef(freq_glm_1)[1])
exp(coef(freq_glm_1)[1] + coef(freq_glm_1)[2])
freq_glm_1 %>% broom::glance()
library(tidyverse)
## --------------------------------------------------------------------------------------------------------------------------------------------------
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
dir <- here::here()
setwd(dir)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
mtpl
## --------------------------------------------------------------------------------------------------------------------------------------------------
KULbg <- "#116E8A"
mtpl %>% group_by(ageph) %>%
summarize(emp_freq = sum(nclaims) / sum(expo)) %>%
ggplot(aes(x = ageph, y = emp_freq)) + theme_bw() +
geom_point(color = KULbg)
## --------------------------------------------------------------------------------------------------------------------------------------------------
a <- min(mtpl$ageph):max(mtpl$ageph)
## --------------------------------------------------------------------------------------------------------------------------------------------------
freq_glm_age <- glm(nclaims ~ ageph, offset = log(expo), data = mtpl, family = poisson(link = "log"))
pred_glm_age <- predict(freq_glm_age, newdata = data.frame(ageph = a, expo = 1), type = "terms", se.fit = TRUE)
b_glm_age <- pred_glm_age$fit
l_glm_age <- pred_glm_age$fit - qnorm(0.975)*pred_glm_age$se.fit
u_glm_age <- pred_glm_age$fit + qnorm(0.975)*pred_glm_age$se.fit
df <- data.frame(a, b_glm_age, l_glm_age, u_glm_age)
p_glm_age <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_glm_age <- p_glm_age + geom_line(aes(a, b_glm_age), size = 1, col = KULbg)
p_glm_age <- p_glm_age + geom_line(aes(a, u_glm_age), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_glm_age), size = 0.5, linetype = 2, col = KULbg)
p_glm_age <- p_glm_age + xlab("ageph") + ylab("fit") + theme_bw()
p_glm_age
freq_glm_age_f <- glm(nclaims ~ as.factor(ageph), offset = log(expo), data = mtpl, family = poisson(link = "log"))
pred_glm_age_f <- predict(freq_glm_age_f, newdata = data.frame(ageph = a, expo = 1), type = "terms", se.fit = TRUE)
b_glm_age_f <- pred_glm_age_f$fit
l_glm_age_f <- pred_glm_age_f$fit - qnorm(0.975)*pred_glm_age_f$se.fit
u_glm_age_f <- pred_glm_age_f$fit + qnorm(0.975)*pred_glm_age_f$se.fit
df <- data.frame(a, b_glm_age_f, l_glm_age_f, u_glm_age_f)
p_glm_age_f <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_glm_age_f <- p_glm_age_f + geom_line(aes(a, b_glm_age_f), size = 1, col = KULbg)
p_glm_age_f <- p_glm_age_f + geom_line(aes(a, u_glm_age_f), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_glm_age_f), size = 0.5, linetype = 2, col = KULbg)
p_glm_age_f <- p_glm_age_f + xlab("ageph") + ylab("fit") + theme_bw()
p_glm_age_f
level <- seq(min(mtpl$ageph), max(mtpl$ageph), by = 5)
freq_glm_age_c <- glm(nclaims ~ cut(ageph, level), offset = log(expo), data = mtpl, family = poisson(link = "log"))
pred_glm_age_c <- predict(freq_glm_age_c, newdata = data.frame(ageph = a, expo = 1), type = "terms", se.fit = TRUE)
b_glm_age_c <- pred_glm_age_c$fit
l_glm_age_c <- pred_glm_age_c$fit - qnorm(0.975)*pred_glm_age_c$se.fit
u_glm_age_c <- pred_glm_age_c$fit + qnorm(0.975)*pred_glm_age_c$se.fit
df <- data.frame(a, b_glm_age_c, l_glm_age_c, u_glm_age_c)
p_glm_age_c <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_glm_age_c <- p_glm_age_c + geom_line(aes(a, b_glm_age_c), size = 1, col = KULbg)
p_glm_age_c <- p_glm_age_c + geom_line(aes(a, u_glm_age_c), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_glm_age_c), size = 0.5, linetype = 2, col = KULbg)
p_glm_age_c <- p_glm_age_c + xlab("ageph") + ylab("fit") + theme_bw()
p_glm_age_c
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(mgcv)
library(mgcv)
freq_gam_age <- gam(nclaims ~ s(ageph),
offset = log(expo),
data = mtpl,
family = poisson(link = "log"))
pred_gam_age <- predict(freq_gam_age,
newdata = data.frame(ageph = a, expo = 1),
type = "terms", se.fit = TRUE)
b_gam_age <- pred_gam_age$fit
l_gam_age <- pred_gam_age$fit - qnorm(0.975)*pred_gam_age$se.fit
u_gam_age <- pred_gam_age$fit + qnorm(0.975)*pred_gam_age$se.fit
df <- data.frame(a, b_gam_age, l_gam_age, u_gam_age)
p_gam_age <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_gam_age <- p_gam_age + geom_line(aes(a, b_gam_age), size = 1, col = KULbg)
p_gam_age <- p_gam_age + geom_line(aes(a, u_gam_age), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_gam_age), size = 0.5, linetype = 2, col = KULbg)
p_gam_age <- p_gam_age + xlab("ageph") + ylab("fit") + theme_bw()
p_gam_age
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(mgcv)
freq_gam <- gam(nclaims ~ s(ageph), offset = log(expo), family = poisson(link = "log"), data = mtpl)
plot(freq_gam, scheme = 4)
library(MASS)
bias_model <- gam(accel ~ s(times, sp = 0, k = 2), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_1 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 2")
bias_model <- gam(accel ~ s(times, sp = 0, k = 5), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_2 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 5")
bias_model <- gam(accel ~ s(times, sp = 0, k = 55), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_3 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 15")
bias_model <- gam(accel ~ s(times), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_4 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("optimal sp and default k")
bias_model <- gam(accel ~ s(times, sp = 3), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_5 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 3 and default k")
bias_model <- gam(accel ~ s(times, sp = 20), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_6 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 10 and default k")
gridExtra::grid.arrange(p_1, p_2, p_3, p_4, p_5, p_6, nrow = 2)
bias_model <- gam(accel ~ s(times, sp = 0, k = 3), data = mcycle)
bias_model <- gam(accel ~ s(times, sp = 0, k = 2), data = mcycle)
bias_model <- gam(accel ~ s(times, sp = 0, k = 3), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_1 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 3")
gridExtra::grid.arrange(p_1, p_2, p_3, p_4, p_5, p_6, nrow = 2)
bias_model <- gam(accel ~ s(times), data = mcycle)
bias_model$sp
bias_model$min.edf
bias_model$smooth
?s
library(tidyverse)
## --------------------------------------------------------------------------------------------------------------------------------------------------
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
dir <- here::here()
setwd(dir)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
KULbg <- "#116E8A"
mtpl %>% group_by(ageph) %>%
summarize(emp_freq = sum(nclaims) / sum(expo)) %>%
ggplot(aes(x = ageph, y = emp_freq)) + theme_bw() +
geom_point(color = KULbg)
## --------------------------------------------------------------------------------------------------------------------------------------------------
a <- min(mtpl$ageph):max(mtpl$ageph)
freq_glm_age <- glm(nclaims ~ ageph, offset = log(expo), data = mtpl, family = poisson(link = "log"))
pred_glm_age <- predict(freq_glm_age, newdata = data.frame(ageph = a, expo = 1), type = "terms", se.fit = TRUE)
b_glm_age <- pred_glm_age$fit
l_glm_age <- pred_glm_age$fit - qnorm(0.975)*pred_glm_age$se.fit
u_glm_age <- pred_glm_age$fit + qnorm(0.975)*pred_glm_age$se.fit
df <- data.frame(a, b_glm_age, l_glm_age, u_glm_age)
p_glm_age <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_glm_age <- p_glm_age + geom_line(aes(a, b_glm_age), size = 1, col = KULbg)
p_glm_age <- p_glm_age + geom_line(aes(a, u_glm_age), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_glm_age), size = 0.5, linetype = 2, col = KULbg)
p_glm_age <- p_glm_age + xlab("ageph") + ylab("fit") + theme_bw()
p_glm_age
freq_glm_age_f <- glm(nclaims ~ as.factor(ageph), offset = log(expo), data = mtpl, family = poisson(link = "log"))
pred_glm_age_f <- predict(freq_glm_age_f, newdata = data.frame(ageph = a, expo = 1), type = "terms", se.fit = TRUE)
b_glm_age_f <- pred_glm_age_f$fit
l_glm_age_f <- pred_glm_age_f$fit - qnorm(0.975)*pred_glm_age_f$se.fit
u_glm_age_f <- pred_glm_age_f$fit + qnorm(0.975)*pred_glm_age_f$se.fit
df <- data.frame(a, b_glm_age_f, l_glm_age_f, u_glm_age_f)
p_glm_age_f <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_glm_age_f <- p_glm_age_f + geom_line(aes(a, b_glm_age_f), size = 1, col = KULbg)
p_glm_age_f <- p_glm_age_f + geom_line(aes(a, u_glm_age_f), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_glm_age_f), size = 0.5, linetype = 2, col = KULbg)
p_glm_age_f <- p_glm_age_f + xlab("ageph") + ylab("fit") + theme_bw()
p_glm_age_f
level <- seq(min(mtpl$ageph), max(mtpl$ageph), by = 5)
freq_glm_age_c <- glm(nclaims ~ cut(ageph, level), offset = log(expo), data = mtpl, family = poisson(link = "log"))
pred_glm_age_c <- predict(freq_glm_age_c, newdata = data.frame(ageph = a, expo = 1), type = "terms", se.fit = TRUE)
b_glm_age_c <- pred_glm_age_c$fit
l_glm_age_c <- pred_glm_age_c$fit - qnorm(0.975)*pred_glm_age_c$se.fit
u_glm_age_c <- pred_glm_age_c$fit + qnorm(0.975)*pred_glm_age_c$se.fit
df <- data.frame(a, b_glm_age_c, l_glm_age_c, u_glm_age_c)
p_glm_age_c <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_glm_age_c <- p_glm_age_c + geom_line(aes(a, b_glm_age_c), size = 1, col = KULbg)
p_glm_age_c <- p_glm_age_c + geom_line(aes(a, u_glm_age_c), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_glm_age_c), size = 0.5, linetype = 2, col = KULbg)
p_glm_age_c <- p_glm_age_c + xlab("ageph") + ylab("fit") + theme_bw()
p_glm_age_c
library(mgcv)
freq_gam_age <- gam(nclaims ~ s(ageph),
offset = log(expo),
data = mtpl,
family = poisson(link = "log"))
pred_gam_age <- predict(freq_gam_age,
newdata = data.frame(ageph = a, expo = 1),
type = "terms", se.fit = TRUE)
b_gam_age <- pred_gam_age$fit
l_gam_age <- pred_gam_age$fit - qnorm(0.975)*pred_gam_age$se.fit
u_gam_age <- pred_gam_age$fit + qnorm(0.975)*pred_gam_age$se.fit
df <- data.frame(a, b_gam_age, l_gam_age, u_gam_age)
p_gam_age <- ggplot(df, aes(x = a)) + ylim(-0.5, 1)
p_gam_age <- p_gam_age + geom_line(aes(a, b_gam_age), size = 1, col = KULbg)
p_gam_age <- p_gam_age + geom_line(aes(a, u_gam_age), size = 0.5, linetype = 2, col = KULbg) + geom_line(aes(a, l_gam_age), size = 0.5, linetype = 2, col = KULbg)
p_gam_age <- p_gam_age + xlab("ageph") + ylab("fit") + theme_bw()
p_gam_age
library(mgcv)
freq_gam <- gam(nclaims ~ s(ageph), offset = log(expo), family = poisson(link = "log"), data = mtpl)
plot(freq_gam, scheme = 4)
library(MASS)
bias_model <- gam(accel ~ s(times, sp = 0, k = 3), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_1 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 3")
bias_model <- gam(accel ~ s(times, sp = 0, k = 5), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_2 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 5")
bias_model <- gam(accel ~ s(times, sp = 0, k = 55), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_3 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 0 and k = 15")
bias_model <- gam(accel ~ s(times), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_4 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("optimal sp and default k")
bias_model <- gam(accel ~ s(times, sp = 3), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_5 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 3 and default k")
bias_model <- gam(accel ~ s(times, sp = 20), data = mcycle)
mcycle$predictions <- predict(bias_model, mcycle)
p_6 <- ggplot(mcycle, aes(times, accel)) + theme_bw() +
geom_point(alpha = .3) +
geom_line(aes(times, predictions), size = 1.0, color = KULbg) +
theme(axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
ggtitle("sp = 10 and default k")
gridExtra::grid.arrange(p_1, p_2, p_3, p_4, p_5, p_6, nrow = 2)
library(tidyverse)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(glmnet)
data(QuickStartExample)
fit <- glmnet(x, y, family = "gaussian", alpha = 1, standardize = TRUE, intercept = TRUE)
summary(fit)
fit %>% broom::tidy()
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(fit, label = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(fit, label = TRUE, xvar = 'lambda')
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(fit, xvar = 'dev', label = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
print(fit)
## --------------------------------------------------------------------------------------------------------------------------------------------------
coef(fit, s = 0.1)
## --------------------------------------------------------------------------------------------------------------------------------------------------
cv_fit <- cv.glmnet(x, y)
cv_fit$lambda.min
cv_fit$lambda.1se
## --------------------------------------------------------------------------------------------------------------------------------------------------
cv_fit <- cv.glmnet(x, y)
cv_fit$lambda.min
cv_fit$lambda.1se
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(cv_fit)
## --------------------------------------------------------------------------------------------------------------------------------------------------
coef(fit, s = cv_fit$lambda.min)
## --------------------------------------------------------------------------------------------------------------------------------------------------
subset <- data.frame(y = y, V1 = x[, 1], V3 = x[, 3], V5 = x[, 5], V6 = x[, 6], V7 = x[, 7], V8 = x[, 8], V11 = x[, 11], V14 = x[, 14], V20 = x[, 20])
final_model <- lm(y ~ V1 + V3 + V5 + V6 + V7 + V8 + V11 + V14 + V20, data = subset)
final_model %>% broom::tidy()
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
dir <- here::here()
setwd(dir)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
## --------------------------------------------------------------------------------------------------------------------------------------------------
map(mtpl[, c("coverage")], contrasts,
contrasts = FALSE)
map(mtpl[, c("coverage")], contrasts,
contrasts = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
y <- mtpl$nclaims
x <- model.matrix( ~ coverage + fuel + use + fleet + sex + ageph + bm +
agec + power, data = mtpl,
contrasts.arg = map(mtpl[, c("coverage")], contrasts,
contrasts = FALSE))[,-1]
x[1:6,]
#  Regularized (G)LMs
####################################################################
library(tidyverse)
## --------------------------------------------------------------------------------------------------------------------------------------------------
# fit <- glmnet(x, y, family = ., alpha = ., weights = ., offset = ., nlambda = ., standardize = ., intercept = .)
## --------------------------------------------------------------------------------------------------------------------------------------------------
library(glmnet)
data(QuickStartExample)
## --------------------------------------------------------------------------------------------------------------------------------------------------
fit <- glmnet(x, y, family = "gaussian", alpha = 1, standardize = TRUE, intercept = TRUE)
summary(fit)
library(broom)
fit %>% broom::tidy()
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(fit, label = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(fit, label = TRUE, xvar = 'lambda')
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(fit, xvar = 'dev', label = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
print(fit)
## --------------------------------------------------------------------------------------------------------------------------------------------------
coef(fit, s = 0.1)
## --------------------------------------------------------------------------------------------------------------------------------------------------
cv_fit <- cv.glmnet(x, y)
## --------------------------------------------------------------------------------------------------------------------------------------------------
cv_fit$lambda.min
cv_fit$lambda.1se
## --------------------------------------------------------------------------------------------------------------------------------------------------
plot(cv_fit)
## --------------------------------------------------------------------------------------------------------------------------------------------------
coef(fit, s = cv_fit$lambda.min)
## --------------------------------------------------------------------------------------------------------------------------------------------------
subset <- data.frame(y = y, V1 = x[, 1], V3 = x[, 3], V5 = x[, 5], V6 = x[, 6], V7 = x[, 7], V8 = x[, 8], V11 = x[, 11], V14 = x[, 14], V20 = x[, 20])
final_model <- lm(y ~ V1 + V3 + V5 + V6 + V7 + V8 + V11 + V14 + V20, data = subset)
final_model %>% broom::tidy()
## --------------------------------------------------------------------------------------------------------------------------------------------------
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
dir <- here::here()
setwd(dir)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
## --------------------------------------------------------------------------------------------------------------------------------------------------
map(mtpl[, c("coverage")], contrasts,
contrasts = FALSE)
map(mtpl[, c("coverage")], contrasts,
contrasts = TRUE)
## --------------------------------------------------------------------------------------------------------------------------------------------------
y <- mtpl$nclaims
x <- model.matrix( ~ coverage + fuel + use + fleet + sex + ageph + bm +
agec + power, data = mtpl,
contrasts.arg = map(mtpl[, c("coverage")], contrasts,
contrasts = FALSE))[,-1]
x[1:6,]
xaringan::infinite_moon_reader()
# Read the MTPL data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
xaringan::infinite_moon_reader()
# Read the MTPL data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
xaringan::infinite_moon_reader()
fit
lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response')))
do.call(rbind, lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response'))))
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
do.call(rbind, lapply(0:fit$n.trees,
function(i) dfr %>% mutate(iter = i,
pred = predict(fit, n.trees = i, type = 'response'))))
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
?knitr::opts_chunk$set
?knitr::opts_chunk$set
?knitr::opts_chunk
str(knitr::opts_chunk$get())
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
mtpl_xgb
set.seed(86493) # reproducibility
fit <- xgboost(
data = mtpl_xgb, #<<
nrounds = 200,
early_stopping_rounds = 20,#<<
verbose = FALSE,
params = list(
booster = 'gbtree', #<<
objective  = 'count:poisson', #<<
eval_metric = 'poisson-nloglik', #<<
eta = 0.1, nthread = 1,
subsample = 0.75, colsample_bynode = 0.5,#<<
max_depth = 3, min_child_weight = 1000,
gamma = 0, lambda = 1, alpha = 1 #<<
)
)
fit
xgb.save(fit, fname = 'xgb_fit')
# this code can be used to extract the R code from an R Markdown (Rmd) document
library(knitr)
setwd("~/Dropbox/Workshop AG/module 2 tree-based ML/sheets")
file.exists("ML_part2.Rmd")
purl("ML_part2.Rmd")
?sample
